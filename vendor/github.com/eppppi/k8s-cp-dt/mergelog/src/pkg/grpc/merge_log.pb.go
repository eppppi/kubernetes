// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: merge_log.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CauseType int32

const (
	CauseType_CAUSE_TYPE_UNSPECIFIED CauseType = 0
	CauseType_CAUSE_TYPE_NEW_CHANGE  CauseType = 1
	CauseType_CAUSE_TYPE_MERGE       CauseType = 2
)

// Enum value maps for CauseType.
var (
	CauseType_name = map[int32]string{
		0: "CAUSE_TYPE_UNSPECIFIED",
		1: "CAUSE_TYPE_NEW_CHANGE",
		2: "CAUSE_TYPE_MERGE",
	}
	CauseType_value = map[string]int32{
		"CAUSE_TYPE_UNSPECIFIED": 0,
		"CAUSE_TYPE_NEW_CHANGE":  1,
		"CAUSE_TYPE_MERGE":       2,
	}
)

func (x CauseType) Enum() *CauseType {
	p := new(CauseType)
	*p = x
	return p
}

func (x CauseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CauseType) Descriptor() protoreflect.EnumDescriptor {
	return file_merge_log_proto_enumTypes[0].Descriptor()
}

func (CauseType) Type() protoreflect.EnumType {
	return &file_merge_log_proto_enumTypes[0]
}

func (x CauseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CauseType.Descriptor instead.
func (CauseType) EnumDescriptor() ([]byte, []int) {
	return file_merge_log_proto_rawDescGZIP(), []int{0}
}

type MergelogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mergelogs []*Mergelog `protobuf:"bytes,1,rep,name=mergelogs,proto3" json:"mergelogs,omitempty"`
}

func (x *MergelogRequest) Reset() {
	*x = MergelogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_merge_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergelogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergelogRequest) ProtoMessage() {}

func (x *MergelogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_merge_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergelogRequest.ProtoReflect.Descriptor instead.
func (*MergelogRequest) Descriptor() ([]byte, []int) {
	return file_merge_log_proto_rawDescGZIP(), []int{0}
}

func (x *MergelogRequest) GetMergelogs() []*Mergelog {
	if x != nil {
		return x.Mergelogs
	}
	return nil
}

type Mergelogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mergelogs []*Mergelog `protobuf:"bytes,1,rep,name=mergelogs,proto3" json:"mergelogs,omitempty"`
}

func (x *Mergelogs) Reset() {
	*x = Mergelogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_merge_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mergelogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mergelogs) ProtoMessage() {}

func (x *Mergelogs) ProtoReflect() protoreflect.Message {
	mi := &file_merge_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mergelogs.ProtoReflect.Descriptor instead.
func (*Mergelogs) Descriptor() ([]byte, []int) {
	return file_merge_log_proto_rawDescGZIP(), []int{1}
}

func (x *Mergelogs) GetMergelogs() []*Mergelog {
	if x != nil {
		return x.Mergelogs
	}
	return nil
}

type Mergelog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewCpid      *CPID                  `protobuf:"bytes,1,opt,name=new_cpid,json=newCpid,proto3" json:"new_cpid,omitempty"`
	SourceCpids  []*CPID                `protobuf:"bytes,2,rep,name=source_cpids,json=sourceCpids,proto3" json:"source_cpids,omitempty"`
	Time         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	CauseType    CauseType              `protobuf:"varint,4,opt,name=cause_type,json=causeType,proto3,enum=k8scpdt.mergelog.v1.CauseType" json:"cause_type,omitempty"`
	CauseMessage string                 `protobuf:"bytes,5,opt,name=cause_message,json=causeMessage,proto3" json:"cause_message,omitempty"`
	By           string                 `protobuf:"bytes,6,opt,name=by,proto3" json:"by,omitempty"`
}

func (x *Mergelog) Reset() {
	*x = Mergelog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_merge_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mergelog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mergelog) ProtoMessage() {}

func (x *Mergelog) ProtoReflect() protoreflect.Message {
	mi := &file_merge_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mergelog.ProtoReflect.Descriptor instead.
func (*Mergelog) Descriptor() ([]byte, []int) {
	return file_merge_log_proto_rawDescGZIP(), []int{2}
}

func (x *Mergelog) GetNewCpid() *CPID {
	if x != nil {
		return x.NewCpid
	}
	return nil
}

func (x *Mergelog) GetSourceCpids() []*CPID {
	if x != nil {
		return x.SourceCpids
	}
	return nil
}

func (x *Mergelog) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Mergelog) GetCauseType() CauseType {
	if x != nil {
		return x.CauseType
	}
	return CauseType_CAUSE_TYPE_UNSPECIFIED
}

func (x *Mergelog) GetCauseMessage() string {
	if x != nil {
		return x.CauseMessage
	}
	return ""
}

func (x *Mergelog) GetBy() string {
	if x != nil {
		return x.By
	}
	return ""
}

type CPID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpid string `protobuf:"bytes,1,opt,name=cpid,proto3" json:"cpid,omitempty"`
}

func (x *CPID) Reset() {
	*x = CPID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_merge_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPID) ProtoMessage() {}

func (x *CPID) ProtoReflect() protoreflect.Message {
	mi := &file_merge_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPID.ProtoReflect.Descriptor instead.
func (*CPID) Descriptor() ([]byte, []int) {
	return file_merge_log_proto_rawDescGZIP(), []int{3}
}

func (x *CPID) GetCpid() string {
	if x != nil {
		return x.Cpid
	}
	return ""
}

type PostSpansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spans []*Span `protobuf:"bytes,1,rep,name=spans,proto3" json:"spans,omitempty"`
}

func (x *PostSpansRequest) Reset() {
	*x = PostSpansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_merge_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostSpansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostSpansRequest) ProtoMessage() {}

func (x *PostSpansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_merge_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostSpansRequest.ProtoReflect.Descriptor instead.
func (*PostSpansRequest) Descriptor() ([]byte, []int) {
	return file_merge_log_proto_rawDescGZIP(), []int{4}
}

func (x *PostSpansRequest) GetSpans() []*Span {
	if x != nil {
		return x.Spans
	}
	return nil
}

type Span struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpid       *CPID                  `protobuf:"bytes,1,opt,name=cpid,proto3" json:"cpid,omitempty"`
	StartTime  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Service    string                 `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	ObjectKind string                 `protobuf:"bytes,5,opt,name=object_kind,json=objectKind,proto3" json:"object_kind,omitempty"`
	ObjectName string                 `protobuf:"bytes,6,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	Message    string                 `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	SpanId     string                 `protobuf:"bytes,8,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	ParentId   string                 `protobuf:"bytes,9,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
}

func (x *Span) Reset() {
	*x = Span{}
	if protoimpl.UnsafeEnabled {
		mi := &file_merge_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span) ProtoMessage() {}

func (x *Span) ProtoReflect() protoreflect.Message {
	mi := &file_merge_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span.ProtoReflect.Descriptor instead.
func (*Span) Descriptor() ([]byte, []int) {
	return file_merge_log_proto_rawDescGZIP(), []int{5}
}

func (x *Span) GetCpid() *CPID {
	if x != nil {
		return x.Cpid
	}
	return nil
}

func (x *Span) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Span) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Span) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *Span) GetObjectKind() string {
	if x != nil {
		return x.ObjectKind
	}
	return ""
}

func (x *Span) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

func (x *Span) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Span) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

func (x *Span) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

type GetAllSpansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spans []*Span `protobuf:"bytes,1,rep,name=spans,proto3" json:"spans,omitempty"`
}

func (x *GetAllSpansResponse) Reset() {
	*x = GetAllSpansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_merge_log_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSpansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSpansResponse) ProtoMessage() {}

func (x *GetAllSpansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_merge_log_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSpansResponse.ProtoReflect.Descriptor instead.
func (*GetAllSpansResponse) Descriptor() ([]byte, []int) {
	return file_merge_log_proto_rawDescGZIP(), []int{6}
}

func (x *GetAllSpansResponse) GetSpans() []*Span {
	if x != nil {
		return x.Spans
	}
	return nil
}

type GetRelevantSpansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spans []*Span `protobuf:"bytes,1,rep,name=spans,proto3" json:"spans,omitempty"`
}

func (x *GetRelevantSpansResponse) Reset() {
	*x = GetRelevantSpansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_merge_log_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelevantSpansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelevantSpansResponse) ProtoMessage() {}

func (x *GetRelevantSpansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_merge_log_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelevantSpansResponse.ProtoReflect.Descriptor instead.
func (*GetRelevantSpansResponse) Descriptor() ([]byte, []int) {
	return file_merge_log_proto_rawDescGZIP(), []int{7}
}

func (x *GetRelevantSpansResponse) GetSpans() []*Span {
	if x != nil {
		return x.Spans
	}
	return nil
}

var File_merge_log_proto protoreflect.FileDescriptor

var file_merge_log_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x6b, 0x38, 0x73, 0x63, 0x70, 0x64, 0x74, 0x2e, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x38, 0x73,
	0x63, 0x70, 0x64, 0x74, 0x2e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x6c, 0x6f, 0x67, 0x73, 0x22, 0x48, 0x0a, 0x09, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67,
	0x73, 0x12, 0x3b, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x38, 0x73, 0x63, 0x70, 0x64, 0x74, 0x2e, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x6c, 0x6f, 0x67, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0xa2,
	0x02, 0x0a, 0x08, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x12, 0x34, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6b, 0x38, 0x73, 0x63, 0x70, 0x64, 0x74, 0x2e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x50, 0x49, 0x44, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x43, 0x70, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x70, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x38, 0x73, 0x63, 0x70, 0x64,
	0x74, 0x2e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x50,
	0x49, 0x44, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x70, 0x69, 0x64, 0x73, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x63, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6b, 0x38, 0x73, 0x63, 0x70, 0x64, 0x74, 0x2e, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x61, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x75, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x62, 0x79, 0x22, 0x1a, 0x0a, 0x04, 0x43, 0x50, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x70, 0x69, 0x64, 0x22,
	0x43, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x38, 0x73, 0x63, 0x70, 0x64, 0x74, 0x2e, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x05, 0x73,
	0x70, 0x61, 0x6e, 0x73, 0x22, 0xd3, 0x02, 0x0a, 0x04, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x2d, 0x0a,
	0x04, 0x63, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x38,
	0x73, 0x63, 0x70, 0x64, 0x74, 0x2e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x50, 0x49, 0x44, 0x52, 0x04, 0x63, 0x70, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6b, 0x38, 0x73, 0x63, 0x70, 0x64, 0x74, 0x2e, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x05, 0x73, 0x70, 0x61,
	0x6e, 0x73, 0x22, 0x4b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e,
	0x74, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6b, 0x38, 0x73, 0x63, 0x70, 0x64, 0x74, 0x2e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x2a,
	0x58, 0x0a, 0x09, 0x43, 0x61, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x02, 0x32, 0x81, 0x05, 0x0a, 0x0f, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a,
	0x0d, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x24,
	0x2e, 0x6b, 0x38, 0x73, 0x63, 0x70, 0x64, 0x74, 0x2e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x6b, 0x38, 0x73, 0x63, 0x70, 0x64,
	0x74, 0x2e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x73, 0x12,
	0x19, 0x2e, 0x6b, 0x38, 0x73, 0x63, 0x70, 0x64, 0x74, 0x2e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x50, 0x49, 0x44, 0x1a, 0x1e, 0x2e, 0x6b, 0x38, 0x73,
	0x63, 0x70, 0x64, 0x74, 0x2e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x4a, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x25, 0x2e,
	0x6b, 0x38, 0x73, 0x63, 0x70, 0x64, 0x74, 0x2e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x28, 0x2e, 0x6b, 0x38, 0x73, 0x63, 0x70, 0x64, 0x74, 0x2e, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x53, 0x70, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e,
	0x73, 0x12, 0x19, 0x2e, 0x6b, 0x38, 0x73, 0x63, 0x70, 0x64, 0x74, 0x2e, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x50, 0x49, 0x44, 0x1a, 0x2d, 0x2e, 0x6b,
	0x38, 0x73, 0x63, 0x70, 0x64, 0x74, 0x2e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x53, 0x70,
	0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x0a, 0x5a,
	0x08, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_merge_log_proto_rawDescOnce sync.Once
	file_merge_log_proto_rawDescData = file_merge_log_proto_rawDesc
)

func file_merge_log_proto_rawDescGZIP() []byte {
	file_merge_log_proto_rawDescOnce.Do(func() {
		file_merge_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_merge_log_proto_rawDescData)
	})
	return file_merge_log_proto_rawDescData
}

var file_merge_log_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_merge_log_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_merge_log_proto_goTypes = []interface{}{
	(CauseType)(0),                   // 0: k8scpdt.mergelog.v1.CauseType
	(*MergelogRequest)(nil),          // 1: k8scpdt.mergelog.v1.MergelogRequest
	(*Mergelogs)(nil),                // 2: k8scpdt.mergelog.v1.Mergelogs
	(*Mergelog)(nil),                 // 3: k8scpdt.mergelog.v1.Mergelog
	(*CPID)(nil),                     // 4: k8scpdt.mergelog.v1.CPID
	(*PostSpansRequest)(nil),         // 5: k8scpdt.mergelog.v1.PostSpansRequest
	(*Span)(nil),                     // 6: k8scpdt.mergelog.v1.Span
	(*GetAllSpansResponse)(nil),      // 7: k8scpdt.mergelog.v1.GetAllSpansResponse
	(*GetRelevantSpansResponse)(nil), // 8: k8scpdt.mergelog.v1.GetRelevantSpansResponse
	(*timestamppb.Timestamp)(nil),    // 9: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),            // 10: google.protobuf.Empty
}
var file_merge_log_proto_depIdxs = []int32{
	3,  // 0: k8scpdt.mergelog.v1.MergelogRequest.mergelogs:type_name -> k8scpdt.mergelog.v1.Mergelog
	3,  // 1: k8scpdt.mergelog.v1.Mergelogs.mergelogs:type_name -> k8scpdt.mergelog.v1.Mergelog
	4,  // 2: k8scpdt.mergelog.v1.Mergelog.new_cpid:type_name -> k8scpdt.mergelog.v1.CPID
	4,  // 3: k8scpdt.mergelog.v1.Mergelog.source_cpids:type_name -> k8scpdt.mergelog.v1.CPID
	9,  // 4: k8scpdt.mergelog.v1.Mergelog.time:type_name -> google.protobuf.Timestamp
	0,  // 5: k8scpdt.mergelog.v1.Mergelog.cause_type:type_name -> k8scpdt.mergelog.v1.CauseType
	6,  // 6: k8scpdt.mergelog.v1.PostSpansRequest.spans:type_name -> k8scpdt.mergelog.v1.Span
	4,  // 7: k8scpdt.mergelog.v1.Span.cpid:type_name -> k8scpdt.mergelog.v1.CPID
	9,  // 8: k8scpdt.mergelog.v1.Span.start_time:type_name -> google.protobuf.Timestamp
	9,  // 9: k8scpdt.mergelog.v1.Span.end_time:type_name -> google.protobuf.Timestamp
	6,  // 10: k8scpdt.mergelog.v1.GetAllSpansResponse.spans:type_name -> k8scpdt.mergelog.v1.Span
	6,  // 11: k8scpdt.mergelog.v1.GetRelevantSpansResponse.spans:type_name -> k8scpdt.mergelog.v1.Span
	1,  // 12: k8scpdt.mergelog.v1.MergelogService.PostMergelogs:input_type -> k8scpdt.mergelog.v1.MergelogRequest
	10, // 13: k8scpdt.mergelog.v1.MergelogService.GetAllMergelogs:input_type -> google.protobuf.Empty
	4,  // 14: k8scpdt.mergelog.v1.MergelogService.GetRelevantMergelogs:input_type -> k8scpdt.mergelog.v1.CPID
	10, // 15: k8scpdt.mergelog.v1.MergelogService.DeleteAllMergelogs:input_type -> google.protobuf.Empty
	5,  // 16: k8scpdt.mergelog.v1.MergelogService.PostSpans:input_type -> k8scpdt.mergelog.v1.PostSpansRequest
	10, // 17: k8scpdt.mergelog.v1.MergelogService.GetAllSpans:input_type -> google.protobuf.Empty
	4,  // 18: k8scpdt.mergelog.v1.MergelogService.GetRelevantSpans:input_type -> k8scpdt.mergelog.v1.CPID
	10, // 19: k8scpdt.mergelog.v1.MergelogService.DeleteAllSpans:input_type -> google.protobuf.Empty
	10, // 20: k8scpdt.mergelog.v1.MergelogService.PostMergelogs:output_type -> google.protobuf.Empty
	2,  // 21: k8scpdt.mergelog.v1.MergelogService.GetAllMergelogs:output_type -> k8scpdt.mergelog.v1.Mergelogs
	2,  // 22: k8scpdt.mergelog.v1.MergelogService.GetRelevantMergelogs:output_type -> k8scpdt.mergelog.v1.Mergelogs
	10, // 23: k8scpdt.mergelog.v1.MergelogService.DeleteAllMergelogs:output_type -> google.protobuf.Empty
	10, // 24: k8scpdt.mergelog.v1.MergelogService.PostSpans:output_type -> google.protobuf.Empty
	7,  // 25: k8scpdt.mergelog.v1.MergelogService.GetAllSpans:output_type -> k8scpdt.mergelog.v1.GetAllSpansResponse
	8,  // 26: k8scpdt.mergelog.v1.MergelogService.GetRelevantSpans:output_type -> k8scpdt.mergelog.v1.GetRelevantSpansResponse
	10, // 27: k8scpdt.mergelog.v1.MergelogService.DeleteAllSpans:output_type -> google.protobuf.Empty
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_merge_log_proto_init() }
func file_merge_log_proto_init() {
	if File_merge_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_merge_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergelogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_merge_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mergelogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_merge_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mergelog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_merge_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_merge_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostSpansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_merge_log_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_merge_log_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSpansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_merge_log_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelevantSpansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_merge_log_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_merge_log_proto_goTypes,
		DependencyIndexes: file_merge_log_proto_depIdxs,
		EnumInfos:         file_merge_log_proto_enumTypes,
		MessageInfos:      file_merge_log_proto_msgTypes,
	}.Build()
	File_merge_log_proto = out.File
	file_merge_log_proto_rawDesc = nil
	file_merge_log_proto_goTypes = nil
	file_merge_log_proto_depIdxs = nil
}
