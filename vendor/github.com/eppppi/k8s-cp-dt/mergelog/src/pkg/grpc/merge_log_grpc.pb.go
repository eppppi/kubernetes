// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: merge_log.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MergelogService_PostMergelogs_FullMethodName        = "/k8scpdt.mergelog.v1.MergelogService/PostMergelogs"
	MergelogService_GetAllMergelogs_FullMethodName      = "/k8scpdt.mergelog.v1.MergelogService/GetAllMergelogs"
	MergelogService_GetRelevantMergelogs_FullMethodName = "/k8scpdt.mergelog.v1.MergelogService/GetRelevantMergelogs"
	MergelogService_DeleteAllMergelogs_FullMethodName   = "/k8scpdt.mergelog.v1.MergelogService/DeleteAllMergelogs"
	MergelogService_PostSpans_FullMethodName            = "/k8scpdt.mergelog.v1.MergelogService/PostSpans"
	MergelogService_GetAllSpans_FullMethodName          = "/k8scpdt.mergelog.v1.MergelogService/GetAllSpans"
	MergelogService_GetRelevantSpans_FullMethodName     = "/k8scpdt.mergelog.v1.MergelogService/GetRelevantSpans"
	MergelogService_DeleteAllSpans_FullMethodName       = "/k8scpdt.mergelog.v1.MergelogService/DeleteAllSpans"
)

// MergelogServiceClient is the client API for MergelogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MergelogServiceClient interface {
	PostMergelogs(ctx context.Context, in *MergelogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllMergelogs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Mergelogs, error)
	GetRelevantMergelogs(ctx context.Context, in *CPID, opts ...grpc.CallOption) (*Mergelogs, error)
	DeleteAllMergelogs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PostSpans(ctx context.Context, in *PostSpansRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllSpans(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllSpansResponse, error)
	GetRelevantSpans(ctx context.Context, in *CPID, opts ...grpc.CallOption) (*GetRelevantSpansResponse, error)
	DeleteAllSpans(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type mergelogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMergelogServiceClient(cc grpc.ClientConnInterface) MergelogServiceClient {
	return &mergelogServiceClient{cc}
}

func (c *mergelogServiceClient) PostMergelogs(ctx context.Context, in *MergelogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MergelogService_PostMergelogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mergelogServiceClient) GetAllMergelogs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Mergelogs, error) {
	out := new(Mergelogs)
	err := c.cc.Invoke(ctx, MergelogService_GetAllMergelogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mergelogServiceClient) GetRelevantMergelogs(ctx context.Context, in *CPID, opts ...grpc.CallOption) (*Mergelogs, error) {
	out := new(Mergelogs)
	err := c.cc.Invoke(ctx, MergelogService_GetRelevantMergelogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mergelogServiceClient) DeleteAllMergelogs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MergelogService_DeleteAllMergelogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mergelogServiceClient) PostSpans(ctx context.Context, in *PostSpansRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MergelogService_PostSpans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mergelogServiceClient) GetAllSpans(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllSpansResponse, error) {
	out := new(GetAllSpansResponse)
	err := c.cc.Invoke(ctx, MergelogService_GetAllSpans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mergelogServiceClient) GetRelevantSpans(ctx context.Context, in *CPID, opts ...grpc.CallOption) (*GetRelevantSpansResponse, error) {
	out := new(GetRelevantSpansResponse)
	err := c.cc.Invoke(ctx, MergelogService_GetRelevantSpans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mergelogServiceClient) DeleteAllSpans(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MergelogService_DeleteAllSpans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MergelogServiceServer is the server API for MergelogService service.
// All implementations must embed UnimplementedMergelogServiceServer
// for forward compatibility
type MergelogServiceServer interface {
	PostMergelogs(context.Context, *MergelogRequest) (*emptypb.Empty, error)
	GetAllMergelogs(context.Context, *emptypb.Empty) (*Mergelogs, error)
	GetRelevantMergelogs(context.Context, *CPID) (*Mergelogs, error)
	DeleteAllMergelogs(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	PostSpans(context.Context, *PostSpansRequest) (*emptypb.Empty, error)
	GetAllSpans(context.Context, *emptypb.Empty) (*GetAllSpansResponse, error)
	GetRelevantSpans(context.Context, *CPID) (*GetRelevantSpansResponse, error)
	DeleteAllSpans(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedMergelogServiceServer()
}

// UnimplementedMergelogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMergelogServiceServer struct {
}

func (UnimplementedMergelogServiceServer) PostMergelogs(context.Context, *MergelogRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMergelogs not implemented")
}
func (UnimplementedMergelogServiceServer) GetAllMergelogs(context.Context, *emptypb.Empty) (*Mergelogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMergelogs not implemented")
}
func (UnimplementedMergelogServiceServer) GetRelevantMergelogs(context.Context, *CPID) (*Mergelogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelevantMergelogs not implemented")
}
func (UnimplementedMergelogServiceServer) DeleteAllMergelogs(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllMergelogs not implemented")
}
func (UnimplementedMergelogServiceServer) PostSpans(context.Context, *PostSpansRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSpans not implemented")
}
func (UnimplementedMergelogServiceServer) GetAllSpans(context.Context, *emptypb.Empty) (*GetAllSpansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSpans not implemented")
}
func (UnimplementedMergelogServiceServer) GetRelevantSpans(context.Context, *CPID) (*GetRelevantSpansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelevantSpans not implemented")
}
func (UnimplementedMergelogServiceServer) DeleteAllSpans(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllSpans not implemented")
}
func (UnimplementedMergelogServiceServer) mustEmbedUnimplementedMergelogServiceServer() {}

// UnsafeMergelogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MergelogServiceServer will
// result in compilation errors.
type UnsafeMergelogServiceServer interface {
	mustEmbedUnimplementedMergelogServiceServer()
}

func RegisterMergelogServiceServer(s grpc.ServiceRegistrar, srv MergelogServiceServer) {
	s.RegisterService(&MergelogService_ServiceDesc, srv)
}

func _MergelogService_PostMergelogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergelogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergelogServiceServer).PostMergelogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MergelogService_PostMergelogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergelogServiceServer).PostMergelogs(ctx, req.(*MergelogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MergelogService_GetAllMergelogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergelogServiceServer).GetAllMergelogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MergelogService_GetAllMergelogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergelogServiceServer).GetAllMergelogs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MergelogService_GetRelevantMergelogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergelogServiceServer).GetRelevantMergelogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MergelogService_GetRelevantMergelogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergelogServiceServer).GetRelevantMergelogs(ctx, req.(*CPID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MergelogService_DeleteAllMergelogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergelogServiceServer).DeleteAllMergelogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MergelogService_DeleteAllMergelogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergelogServiceServer).DeleteAllMergelogs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MergelogService_PostSpans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSpansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergelogServiceServer).PostSpans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MergelogService_PostSpans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergelogServiceServer).PostSpans(ctx, req.(*PostSpansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MergelogService_GetAllSpans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergelogServiceServer).GetAllSpans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MergelogService_GetAllSpans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergelogServiceServer).GetAllSpans(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MergelogService_GetRelevantSpans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergelogServiceServer).GetRelevantSpans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MergelogService_GetRelevantSpans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergelogServiceServer).GetRelevantSpans(ctx, req.(*CPID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MergelogService_DeleteAllSpans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergelogServiceServer).DeleteAllSpans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MergelogService_DeleteAllSpans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergelogServiceServer).DeleteAllSpans(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MergelogService_ServiceDesc is the grpc.ServiceDesc for MergelogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MergelogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "k8scpdt.mergelog.v1.MergelogService",
	HandlerType: (*MergelogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostMergelogs",
			Handler:    _MergelogService_PostMergelogs_Handler,
		},
		{
			MethodName: "GetAllMergelogs",
			Handler:    _MergelogService_GetAllMergelogs_Handler,
		},
		{
			MethodName: "GetRelevantMergelogs",
			Handler:    _MergelogService_GetRelevantMergelogs_Handler,
		},
		{
			MethodName: "DeleteAllMergelogs",
			Handler:    _MergelogService_DeleteAllMergelogs_Handler,
		},
		{
			MethodName: "PostSpans",
			Handler:    _MergelogService_PostSpans_Handler,
		},
		{
			MethodName: "GetAllSpans",
			Handler:    _MergelogService_GetAllSpans_Handler,
		},
		{
			MethodName: "GetRelevantSpans",
			Handler:    _MergelogService_GetRelevantSpans_Handler,
		},
		{
			MethodName: "DeleteAllSpans",
			Handler:    _MergelogService_DeleteAllSpans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merge_log.proto",
}
